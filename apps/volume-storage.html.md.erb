---
title: Add and Use Volume Storage
layout: docs
nav: firecracker
titlecase: false
order: 30
---

<%= partial "/docs/partials/v2_transition_banner" %>

Volumes are local persistent storage for [Fly Machines](/docs/machines/). Volumes allow an app to save its state—to preserve configuration, session or user data—and then be restarted with that information in place.

**The first rule of Fly Volumes is: always run at least two of them per application.** The way to do this is to run at least two Machines per app. Also note that volumes don't sync up by themselves. Your app needs to take care of that. Refer to [Fly Volumes](/docs/reference/volumes/) for exceptions to the rule and details about how volumes are implemented.

## Launch an app with a Fly Volume

Follow these steps to create a new app, a new volume, and then mount the volume before deploy. If you need to add a volume to an existing app, refer to [Add a volume to an existing app by cloning](#add-a-volume-to-an-existing-app-by-cloning). 

### Launch the app, but don't deploy it yet

The app has to exist for the volume to be created. The volume has to exist before you can mount it to a Machine. The first deployment of your app will create a Machine. So the shortest path to a Machine with a mounted volume begins by launching the app, and saying `N` to "deploy now?":

```cmd
fly launch 
```
```out
...
Wrote config file fly.toml
? Would you like to deploy now? No
...
Your app is ready! Deploy with `flyctl deploy`
```

### Provision the volume

Create a volume for the app, with the name you chose, in the same region you're deploying the app to. For example, the following command creates a volume called `myapp_data`, in region `lhr`, with 1GB of storage, for the app named `myapp`:

```cmd
fly volumes create myapp_data --region lhr --size 1 --app myapp
```

### Configure the app to mount the volume

Add a `[mounts]` section in the app's `fly.toml`. For example, the following configures the app to expose data from a volume named `myapp_data` under the `/data` directory of the application.

```toml
[mounts]
source="myapp_data"
destination="/data"
```

### Deploy the app

```cmd
fly deploy 
```

On the first deployment, you'll get one Machine. You can confirm this with `fly status`.

```cmd
fly status
```

```out
App
  Name     = myapp
  Owner    = personal
  Hostname = myapp.fly.dev
  Image    = image:latest
  Platform = machines

Machines
PROCESS	ID            	VERSION	REGION	STATE  	CHECKS 	LAST UPDATED
app    	6e82944a79dd87	1      	lhr   	started	1 total	2023-04-26T20:40:48Z
```

### Confirm the volume is mounted

You can check on all the volumes in your app using `fly volumes list`. The `ATTACHED VM` column lets you know which Machine, if any, the volume is mounted on.

```cmd
fly volumes list
```
```out
ID                      STATE   NAME    SIZE    REGION  ZONE    ENCRYPTED       ATTACHED VM     CREATED AT    
vol_zmjnv8m81p5rywgx    created data    1GB     lhr     b6a7    true            5683606c41098e  3 minutes ago
```

You can also see the volume in the Machine's file system (there's only one Machine so far):
```cmd
fly ssh console -s -C df
```
```out
? Select VM: lhr: 5683606c41098e fdaa:0:3b99:a7b:7e:3155:9844:2 nameless-feather-6339
Connecting to fdaa:0:3b99:a7b:7e:3155:9844:2... complete
Filesystem     1K-blocks   Used Available Use% Mounted on
devtmpfs          103068      0    103068   0% /dev
/dev/vda         8191416 172748   7582856   3% /
shm               113224      0    113224   0% /dev/shm
tmpfs             113224      0    113224   0% /sys/fs/cgroup
/dev/vdb         1011672   2564    940500   1% /data
```

Voilà: our 1GB volume is mounted at `/data`.

### Clone the first Machine to scale out to two VMs

```cmd
fly machine clone 5683606c41098e
```

Check what that did:

```cmd
fly volumes list
```
```
ID                      STATE   NAME    SIZE    REGION  ZONE    ENCRYPTED       ATTACHED VM     CREATED AT     
vol_ez1nvxkwl3jrmxl7    created data    1GB     lhr     4de2    true            91851edb6ee983  39 seconds ago
vol_zmjnv8m81p5rywgx    created data    1GB     lhr     b6a7    true            5683606c41098e  7 minutes ago
```

`fly machine clone` creates an additional Machine with the same configuration as the source, and creates and mounts a volume for the new Machine, if the source Machine has one. **`fly machine clone` doesn't write data into the new volume.**

At this point there are two identically configured Machines on the app, each with a volume of the same size. You take it from here, setting up whatever data replication you need. 

### On a V1 (Nomad) app

Create an additional volume in the desired region, then [use `fly scale count`](/docs/legacy-scaling/) to add a VM to use it.

## Add a volume to an existing app by cloning

If you try to add a volume to an app that's already been deployed, you might get errors because the volume and the Machine created for your app on deploy need to be on the same physical host. One way to get around this is to attach a new volume to a clone of one of your app's Machines.

Create new volume for your app in the same region the app will be deployed:

```cmd
fly volumes create myapp_data --region lhr --size 1 --app myapp
```

Clone one of your app's Machine (with no volume) and attach the volume you just created:

```cmd
fly machine clone <machine-id> --attach-volume <vol-id>
```

Destroy the Machine you used to create the clone:
```cmd
fly machine destroy <non-volume-machine-id>
```

Check whether the volume is properly attached to the Machine:

```cmd
fly volumes list
```

The volume you just created should have the newly-cloned Machine's ID listed under `ATTACHED VM`.

## Remove a volume from an app

You can't currently unmount a volume from an existing Machine. If you need to remove volumes from your app, you can [scale it](/docs/apps/scale-count/) down to zero Machines, [destroy all the volumes](/docs/reference/volumes#delete-a-volume), remove the `mounts` section from `fly.toml`, and redeploy. **Only destroy a volume whose data you no longer need access to.**

### On a V1 (Nomad) app

Remove the `mounts` section from `fly.toml` and redeploy. This will create a new Machine without a volume. [Destroy any unused volumes](/docs/reference/volumes#delete-a-volume), **only if you no longer need their data**.
