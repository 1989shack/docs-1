---
title: Working with the Machines API
objective: Get familiar with the Fly Machines API.
layout: framework_docs
order: 1
---

This document covers usage of the Machines REST API to start, stop, update and interact with machines. For the impatient, [flyctl also provides commands](https://fly.io/docs/flyctl/machine/) for experimenting with the API.

See all possible machine states [in the table below](#machine-states).

## Connecting to the API

The Machines API endpoint requires a connection to your Fly private network - either by running on a VM inside the network, or via a WireGuard VPN, or using `flyctl proxy`.

This guide assumes that you have `flyctl` and `curl` installed, and have authenticated to the Fly.io platform.

### Connecting via WireGuard

This method requires more setup but gives you direct access to machines over the Wireguard VPN.

First, follow the [instructions](/docs/reference/private-networking/#private-network-vpn) to set up a permanent WireGuard connection to your Fly network. We recommend WireGuard because you can directly test your machines from your local machine.

Once you're connected, Fly internal DNS should expose the Machines API endpoint at: `http://_api.internal:4280`

### Connecting via `flyctl proxy`

For quick testing of this API, you can proxy a local port to the internal API endpoint. Pick any organization when asked.

```cmd
flyctl machines api-proxy
```

With the above command running, in a separate terminal, try this to confirm you can access the API:

```cmd
curl http://127.0.0.1:4280
```

If you successfully reach the API, it should respond with a `404 page not found` error. That's because this was not a defined endpoint.

### Setting up the environment

If you are using a Wireguard VPN or a `flyctl` proxy,
set these environment variables to make the following commands easier to use.

```bash
$ export FLY_API_HOSTNAME="_api.internal:4280" # or set to `127.0.0.1:4280` when using 'flyctl proxy'
$ export FLY_API_TOKEN=$(fly auth token)
```

In order to access this API on a fly VM, make the token available as a secret:

```cmd
flyctl secrets set FLY_API_TOKEN=$(fly auth token)
```

A convenient way to set the FLY_API_HOSTNAME is to add it to your `Dockerfile`:

```
ENV FLY_API_HOSTNAME="_api.internal:4280
```


You'll still need to replace the application name and machine ID for commands to work.

### Authentication

All requests must include the the fly API Token in the HTTP Headers as follows:

```
Authorization: Bearer <fly_api_token>
```

### Create a machine

Create machine, which starts running immediately. This is where you configure the machine characteristics, like its CPU and memory. You can also allow connections from the internet through the Fly proxy. Learn more about this behavior in the [networking section](#networking).
Following this call, you can make a [blocking API request](#wait-for-a-machine-to-start) to wait for a machine to start.

##### Parameters
<div class="params">
<ul style="list-style: none;">
<% data.machines.create.attrs.each do |attr| %>
  <li style="list-style: none; border-bottom: 1px solid #80808029;padding-bottom: 5px;">
    <span style="font-weight: 600; font-size:15px;"><%= attr.name %></span>
    <% if attr.required %>
      <span style="text-transform: uppercase; font-size: 10px; background-color: #faa387; border-radius: 5px; padding: 3px;">Required</span>
    <% end %>
    <div>
      <p style="font-size:14px;"><%= attr.description %></p>
    </div>
    <% if attr.kv %>
      <ul>
      <% attr.kv.each do |kv| %>
        <li style="list-style: none; border-bottom: 1px solid #80808029;padding-bottom: 5px;">
        <span style="font-weight: 600; font-size:15px;"><%= kv.name %></span>
        <% if kv.required %>
          <span style="text-transform: uppercase; font-size: 10px; background-color: #faa387; border-radius: 5px; padding: 3px;">Required</span>
        <% end %>
        <div>
          <p style="font-size:14px;"><%= kv.description %></p>
        </div>
        <% if kv.kv %>
      <ul>
        <% kv.kv.each do |nkv| %>
        <li style="list-style: none; border-bottom: 1px solid #80808029;padding-bottom: 5px;">
          <span style="font-weight: 600; font-size:15px;"><%= nkv.name %></span>
          <% if nkv.required %>
            <span style="text-transform: uppercase; font-size: 10px; background-color: #faa387; border-radius: 5px; padding: 3px;">Required</span>
          <% end %>
          <div>
          <p style="font-size:14px;"><%= nkv.description %></p>
          </div>
        </li>
      <% end %>
      </ul>
    <% end %>
        </li>
      <% end %>
      </ul>
    <% end %>
  </li>
<% end %>
</ul>
</div>

<%= partial "/docs/reference/machines/launch_req" %>

##### Returns
Returns the machine object if create succeeded. This call will return an error if something goes wrong. 
<div class="returns">
<ul style="list-style: none;">
<% data.machines.machine.each do |attr| %>
  <li style="list-style: none; border-bottom: 1px solid #80808029;padding-bottom: 5px;">
    <span style="font-weight: 600; font-size:15px;"><%= attr.name %></span>
    <span style="text-transform: uppercase; font-size: 10px; padding: 3px;"><%= attr.type %></span>
    <div>
      <p style="font-size:14px;"><%= attr.description %></p>
    </div>
    <% if attr.kv %>
      <ul>
      <% attr.kv.each do |kv| %>
        <li style="list-style: none; border-bottom: 1px solid #80808029;padding-bottom: 5px;">
        <span style="font-weight: 600; font-size:15px;"><%= kv.name %></span>
        <% if kv.required %>
          <span style="text-transform: uppercase; font-size: 10px; background-color: #faa387; border-radius: 5px; padding: 3px;">Required</span>
        <% end %>
        <div>
          <p style="font-size:14px;"><%= kv.description %></p>
        </div>
        </li>
      <% end %>
      </ul>
      <%end%>
  </li>
<% end %>
</ul>
</div>

<%= partial "/docs/reference/machines/launch_resp" %>

### Get Machine

### Start machine

### Stop machine

### Update machine

### Delete machine

### List Machines

### Lease Machines


### Machine States

This table explains the possible machine states. A machine may only be in one state at a time.

<table class="table-stripe table-stretch table-pad text-lg whitespace-nowrap m-0">
  <tbody>
    <tr>
      <td class="font-bold">created</td>
      <td>Initial status</td>
    </tr>
    <tr>
      <td class="font-bold">started</td>
      <td>Running and network-accessible</td>
    </tr>
    <tr>
      <td class="font-bold">stopping</td>
      <td>Transitioning from `started` to `stopped`</td>
    </tr>
    <tr>
      <td class="font-bold">stopped</td>
      <td>Exited, either on its own or explicitly stopped</td>
    </tr>
    <tr>
      <td class="font-bold">replacing</td>
      <td>User-initiated configuration change (image, VM size, etc.) in progress</td>
    </tr>
    <tr>
      <td class="font-bold">destroying</td>
      <td>User asked for the machine to be completely removed</td>
    </tr>
    <tr>
      <td class="font-bold">destroyed</td>
      <td>No longer exists</td>
    </tr>
    </tbody>
  </table>


Internal note: the replaced state is only possible when requesting a specific instance_id.
