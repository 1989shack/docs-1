---
title: "Run a Node App"
layout: language-and-framework-docs
sitemap: false
redirect_from: /docs/getting-started/node/
---

<%= partial "partials/intro", locals: { runtime: "Node" } %>

## _The node-demo Application_

Our example will be a visitor counter appliation that has no dependencies.
You can obtain the source by running the following command in an empty directory:

```
npx --yes @flydotio/node-demo@latest
```

Those that prefer [bun](https://bun.sh/) can replace `npx --yes` with `bunx`, and
all subsequent references to `node` with `bun`.

The source for this demo can be found at https://github.com/fly-apps/node-demo/.

## _Running The Application_

Run `node server.js` to start the application

```cmd
node server.js
```
```output
Server is listening on port 3000
```

And connect to localhost:3000 to confirm that you have a working Node application. Now to package it up for Fly.


## _Install Flyctl and Login_

We are ready to start working with Fly and that means we need `flyctl`, our CLI app for managing apps on Fly. If you've already installed it, carry on. If not, hop over to [our installation guide](/docs/hands-on/install-flyctl/). Once that's installed you'll want to [log in to Fly](/docs/getting-started/log-in-to-fly/).


## _Launch the app on Fly_

To launch an app on fly, run `flyctl launch` in the directory with your source code. This will create and configure a fly app for you by inspecting your source code, then prompt you to deploy.

```cmd
flyctl launch
```
```output
Scanning source code
Detected a NodeJS app
? Choose an app name (leave blank to generate one): 
? Select Organization: Sam Ruby (personal)
Some regions require a paid plan (bom, fra, maa).
See https://fly.io/plans to set up a plan.

? Choose a region for deployment: Ashburn, Virginia (US) (iad)
App will use 'iad' region as primary

Created app 'restless-snow-5214' in organization 'personal'
Admin URL: https://fly.io/apps/restless-snow-5214
Hostname: restless-snow-5214.fly.dev
installing: npx --yes @flydotio/dockerfile@latest
     create  Dockerfile
     create  .dockerignore
Wrote config file fly.toml
Validating /Users/rubys/tmp/demo/fly.toml
Platform: machines
âœ“ Configuration is valid

If you need custom packages installed, or have problems with your deployment
build, you may need to edit the Dockerfile for app-specific changes. If you
need help, please post on https://community.fly.io.

Now: run 'fly deploy' to deploy your Node.js app.
...
```

First, this command scans your source code to determine how to build a deployment image as well as identify any other configuration your app needs, such as secrets and exposed ports.

After your source code is scanned and the results are printed, you'll be prompted for an application name.  You if you don't provide one, fly will generate a name for you.

Next you'll be prompted for an organization. Organizations are a way of sharing applications and resources between Fly users. Every fly account has a personal organization, called `personal`, which is only visible to your account. Let's select that for this guide.

Finally, you'll be prompted to select a region to deploy in. The closest region to you is selected by default. You can use this or change to another region.

At this point, `flyctl` creates an app for you and writes your configuration to a `fly.toml` file. You'll then be prompted to build and deploy your app. Once complete, your app will be running on fly.

## _Inside `fly.toml`_

The `fly.toml` file now contains a default configuration for deploying your app. In the process of creating that file, `flyctl` has also created a Fly-side application slot of the same name, "hellonode". If we look at the `fly.toml` file we can see the name in there:

```toml
app = "restless-snow-5214"
primary_region = "iad"

[build]

[http_service]
  internal_port = 3000
  force_https = true
  auto_stop_machines = true
  auto_start_machines = true
  min_machines_running = 0
  processes = ["app"]
```

The `flyctl` command will always refer to this file in the current directory if it exists, specifically for the `app` name/value at the start. That name will be used to identify the application to the Fly platform. The rest of the file contains settings to be applied to the application when it deploys.

We'll have more details about these properties as we progress, but for now, it's enough to say that they mostly configure which ports the application will be visible on.

## _Deploying to Fly_

To deploy changes to your app, just run:

```cmd
flyctl deploy
```

This will lookup our `fly.toml` file, and get the app name from there. Then `flyctl` will start the process of deploying our application to the Fly platform. Flyctl will return you to the command line when it's done.

## _Viewing the Deployed App_

Now the application has been deployed, let's find out more about its deployment. The command `flyctl status` will give you all the essential details.

```cmd
flyctl status
```
```output
App
  Name     = restless-snow-5214                                        
  Owner    = personal                                                  
  Hostname = restless-snow-5214.fly.dev                                
  Image    = restless-snow-5214:deployment-01H7ZTDQAPHN6AGK7HE76KMSFZ  
  Platform = machines                                                  

Machines
PROCESS	ID            	VERSION	REGION	STATE  	ROLE	CHECKS	LAST UPDATED         
app    	17811e91aed728	1      	iad   	started	    	      	2023-08-16T18:42:01Z	
app    	48ed0d4f71ee28	1      	iad   	started	    	      	2023-08-16T18:42:11Z
```

## _Connecting to the App_

The quickest way to browse your newly deployed application is with the `flyctl open` command.

```cmd
flyctl open
```
```output
opening https://restless-snow-5214.fly.dev/ ...
```

Your browser will be sent to the displayed URL. Fly will auto-upgrade this URL to an HTTPS secured URL.

## _Bonus Points_

* Review the `Dockerfile` and `.dockerignore` files that have been provided for you.
* Check out our [blog post](https://fly.io/blog/vanilla-candy-sprinkles/) to see how to
add templates, databases and more to the application.
* If you want to know what IP addresses the app is using, try `flyctl ips list`:

```cmd
flyctl ips list
```
```out
VERSION	IP                  	TYPE           	REGION	CREATED AT 
v6     	2a09:8280:1::37:5a22	public         	global	2m16s ago 	
v4     	66.241.125.61       	public (shared)	
```

## _Arrived at Destination_

You have successfully built, deployed, and connected to your first Node application on Fly.
