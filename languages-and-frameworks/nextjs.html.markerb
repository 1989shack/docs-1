---
title: "Run a NextJS App"
layout: language-and-framework-docs
sitemap: false
redirect_from: /docs/getting-started/nextjs/
---

<% app_name = "hello-next" %>
<%= partial "partials/intro", locals: { runtime: "NextJS", link: "https://NextJS.org" } %>

You can deploy your [NextJS](https://nextjs.org/) app on Fly with minimal effort, our CLI will do the heavy lifting. You can use your existing NextJS app or you can [create one using the tutorial](https://nextjs.org/learn/basics/create-nextjs-app) then come back here to deploy your app.

## _Generate the NextJS app_

If you just want to see how Fly deployment works, follow these steps.

<%= partial "partials/flyctl" %>

Now let's launch your NextJS app.

```cmd
cd nextjs-blog
fly launch
```
```output
Creating app in /Users/me/nextjs-blog
Scanning source code
Detected a Next.js app
? Choose an app name (leave blank to generate one): nextjs-blog
? Select Organization: flyio (flyio)
Some regions require a paid plan (bom, fra, maa).
See https://fly.io/plans to set up a plan.

? Choose a region for deployment: Ashburn, Virginia (US) (iad)
App will use 'iad' region as primary

Created app 'nextjs-blog' in organization 'personal'
Admin URL: https://fly.io/apps/nextjs-blog
Hostname: nextjs-blog.fly.dev
     create  Dockerfile
Wrote config file fly.toml
Validating /Users/rubys/tmp/nextjs-blog/fly.toml
Platform: machines
âœ“ Configuration is valid

If you need custom packages installed, or have problems with your deployment
build, you may need to edit the Dockerfile for app-specific changes. If you
need help, please post on https://community.fly.io.

Now: run 'fly deploy' to deploy your Next.js app.
```

<%= partial "partials/launched" %>

## _fetch errrors processing images_

If your application uses the `<Image>` element and your images aren't showing and you are seeing the following in your logs:

```
TypeError: fetch failed
```

Scan backwards in your logs for the following:

```
Warning: For production Image Optimization with Next.js, the optional 'sharp' package is strongly recommended. Run 'npm i sharp', and Next.js will use it automatically for Image Optimization.

Read more: https://nextjs.org/docs/messages/sharp-missing-in-production
```

Follow the instructions in the message, and then redeploy:

```
npm i sharp
fly deploy
```

## _What about build time environment variables?_

If you're an NextJS user you might know that it supports [exposing environment variables to the browser](https://nextjs.org/docs/basic-features/environment-variables#exposing-environment-variables-to-the-browser) using variables with name starting with `NEXT_PUBLIC_`.

For our build system to understand that you need to tweak two sections we generate for you, `fly.toml` and our `Dockerfile`. 

Search for `[build.args]` on your `fly.toml` and add the variables you need there.

```toml
[build.args]
  NEXT_PUBLIC_EXAMPLE="This is the value"
  NEXT_PUBLIC_OTHER="Other value"
```

Then go to your `Dockerfile` and add `ARG` instructions before your `FROM base as build` line like this:

```Dockerfile
# Throw-away build stage to reduce size of final image
FROM base as build

# Build arguments
ARG NEXT_PUBLIC_EXAMPLE="value"
ARG NEXT_PUBLIC_OTHER="Other value"
```

The dockerfile-node application can be used to help with this.  Update your dockerfile using the following command:

```cmd
npx dockerfile "--arg-build=NEXT_PUBLIC_EXAMPLE:value" \
  "--arg-build=NEXT_PUBLIC_OTHER=Other value"
```
